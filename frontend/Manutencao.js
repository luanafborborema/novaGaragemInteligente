// ginteligente/Manutencao.js
// Conte√∫do COMPLETO da classe Manutencao

/**
 * @class Manutencao
 * @classdesc Representa um registro de manuten√ß√£o para um ve√≠culo.
 * Guarda informa√ß√µes como data, tipo de servi√ßo, custo e uma descri√ß√£o.
 */
export class Manutencao {
    /**
     * Construtor da classe Manutencao.
     * @constructor
     * @param {string} d - A data e hora da manuten√ß√£o no formato de input HTML (YYYY-MM-DDTHH:mm).
     * @param {string} t - O tipo de manuten√ß√£o (ex: "Troca de √ìleo", "Revis√£o de Freios").
     * @param {number|string} c - O custo da manuten√ß√£o.
     * @param {string} [ds=''] - Uma descri√ß√£o opcional da manuten√ß√£o.
     */
    constructor(d, t, c, ds = '') {
        /** @member {Date} */
        // Tenta criar um objeto Date a partir da string fornecida. 
        // Adapta o formato "YYYY-MM-DDTHH:mm" (datetime-local) para ser reconhecido como "YYYY-MM-DD HH:mm".
        this.data = d ? new Date(d.replace('T', ' ')) : new Date('invalid date'); 
        if (isNaN(this.data.getTime())) { // Se o primeiro parse falhar, tenta como string ISO padr√£o
             this.data = d ? new Date(d) : new Date('invalid date');
        }

        /** @member {string} */
        this.tipo = t ? t.trim() : ''; // Remove espa√ßos em branco
        /** @member {number} */
        // Converte o custo para um n√∫mero flutuante; garante que n√£o seja negativo, 0 se for inv√°lido
        this.custo = parseFloat(c);
        if (isNaN(this.custo) || this.custo < 0) this.custo = 0; 

        /** @member {string} */
        this.descricao = ds ? ds.trim() : ''; // Remove espa√ßos em branco
        
        /** @member {string} */
        // Gera um ID √∫nico para cada registro de manuten√ß√£o, usando timestamp e um valor aleat√≥rio.
        this.id = `manut_${Date.now().toString(36)}_${Math.random().toString(36).substring(2, 7)}`;
    }

    /**
     * Valida os dados do registro de manuten√ß√£o para garantir que s√£o v√°lidos.
     * @function validar
     * @returns {{valido: boolean, erros: string[]}} - Um objeto contendo:
     * - `valido`: um booleano (true se os dados s√£o v√°lidos, false caso contr√°rio).
     * - `erros`: um array de strings descrevendo os problemas encontrados.
     */
    validar() {
        const erros = []; // Array para armazenar mensagens de erro
        if (isNaN(this.data.getTime())) erros.push("Data/Hora inv√°lida."); // Verifica se a data foi parseada corretamente
        if (!this.tipo) erros.push("O campo 'Tipo de Servi√ßo' √© obrigat√≥rio."); // Verifica se o tipo n√£o est√° vazio
        if (isNaN(this.custo) || this.custo < 0) erros.push("O 'Custo' √© inv√°lido (deve ser um n√∫mero igual ou maior que zero)."); // Verifica o custo
        return { valido: erros.length === 0, erros: erros }; // Retorna o resultado da valida√ß√£o
    }

    /**
     * Formata os detalhes da manuten√ß√£o para exibi√ß√£o em uma lista de hist√≥rico (para registros passados).
     * Inclui um bot√£o de remover o registro.
     * @function formatarParaHistorico
     * @returns {string} - Uma string HTML formatada com os detalhes e o bot√£o de remo√ß√£o.
     */
    formatarParaHistorico() {
        // Formata a data (dia/m√™s/ano) e o custo em moeda local (BRL)
        const dataFormatada = !isNaN(this.data.getTime()) ? this.data.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'Data Inv.';
        const custoFormatado = this.custo.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        
        // CORRIGIDO AQUI! Antes estava 'cFo - matado', agora √© 'custoFormatado'
        let textoManutencao = `${this.tipo} em ${dataFormatada} - ${custoFormatado}`; 
        if (this.descricao) textoManutencao += ` (${this.descricao})`; // Adiciona descri√ß√£o se existir
        
        // Retorna o HTML com o texto e o bot√£o de remover (com o ID da manuten√ß√£o no atributo data-id)
        return `${textoManutencao} <button class="remover-manutencao-btn" data-id="${this.id}" title="Remover registro">üóëÔ∏è</button>`;
    }

    /**
     * Formata os detalhes da manuten√ß√£o para exibi√ß√£o em uma lista de agendamentos (para registros futuros).
     * Inclui um bot√£o de remover o agendamento.
     * @function formatarParaAgendamento
     * @returns {string} - Uma string HTML formatada com os detalhes e o bot√£o de remo√ß√£o.
     */
    formatarParaAgendamento() {
        // Formata a data e hora completas e o custo em moeda local (BRL)
        const dataHoraFormatada = !isNaN(this.data.getTime()) ? this.data.toLocaleString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Data/Hora Inv.';
        const custoFormatado = this.custo.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        
        let textoAgendamento = `${this.tipo} p/ ${dataHoraFormatada} - ${custoFormatado}`;
        if (this.descricao) textoAgendamento += ` (${this.descricao})`;
        
        // Retorna o HTML com o texto e o bot√£o de remover (com o ID da manuten√ß√£o no atributo data-id)
        return `${textoAgendamento} <button class="remover-manutencao-btn" data-id="${this.id}" title="Remover agendamento">üóëÔ∏è</button>`;
    }

    /**
     * Converte o objeto `Manutencao` para um formato de objeto simples, adequado para serializa√ß√£o JSON
     * (salvar na `localStorage` ou enviar via API).
     * @function toJSON
     * @returns {object} - Um objeto JavaScript simples contendo as propriedades relevantes para persist√™ncia.
     */
    toJSON() {
        return {
            // Salva a data como uma string ISO para manter o formato consistente ao salvar/carregar
            data: !isNaN(this.data.getTime()) ? this.data.toISOString() : null,
            tipo: this.tipo,
            custo: this.custo,
            descricao: this.descricao,
            id: this.id // Salva o ID √∫nico
        };
    }

    /**
     * M√©todo est√°tico para recriar uma inst√¢ncia de `Manutencao` a partir de um objeto JSON.
     * √ötil ao carregar dados do `localStorage` ou de uma API.
     * @static
     * @function fromJSON
     * @param {object} jsonObject - O objeto JSON a ser convertido.
     * @returns {Manutencao|null} - Uma nova inst√¢ncia de `Manutencao` ou `null` se o `jsonObject` for inv√°lido.
     */
    static fromJSON(jsonObject) {
        // Valida√ß√£o b√°sica do objeto JSON recebido
        if (!jsonObject || typeof jsonObject.tipo === 'undefined' || typeof jsonObject.custo === 'undefined' || typeof jsonObject.data === 'undefined' || !jsonObject.id) {
             console.error("Objeto JSON inv√°lido fornecido para Manutencao.fromJSON:", jsonObject);
             return null; // Retorna null se os dados essenciais n√£o estiverem presentes
        }
        // Cria uma nova inst√¢ncia de Manutencao usando os dados do JSON.
        // O construtor Manutencao j√° lida com o parse da data string para Date.
        const m = new Manutencao(jsonObject.data, jsonObject.tipo, jsonObject.custo, jsonObject.descricao);
        m.id = jsonObject.id; // Garante que o ID original seja restaurado.
        return m;
    }
}